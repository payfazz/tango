package {{.LowerModel}}

import (
	"context"
)

// QueryInterface contract for sending query to {{.CamelModel}} table
type QueryInterface interface {
	{{- if .Action.Read}}
	All(ctx context.Context) ([]*{{.Name}}Model, error)
	{{- end}}
	{{- if .Action.Find}}
	ById(ctx context.Context, id {{.DataType}}) (*{{.Name}}Model, error)
	{{- end}}
}

type query struct {
	repository RepositoryInterface
}

{{if .Action.Read}}
// All get data from {{.CamelModel}} without any conditions and orders
func (q *query) All(ctx context.Context) ([]*{{.Name}}Model, error) {
	return q.repository.FindAll(ctx, nil, nil, 0, 0)
}
{{end}}
{{if .Action.Find}}
// ById get one data from {{.CamelModel}} by given id
func (q *query) ById(ctx context.Context, id {{.DataType}}) (*{{.Name}}Model, error) {
	return q.repository.Find(ctx, id)
}
{{end}}

// Query constructor of {{.CamelModel}} query
func Query() QueryInterface {
	return &query{
		repository: Repository(),
	}
}
