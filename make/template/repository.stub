package {{.LowerModel}}

import (
	"context"

	"github.com/payfazz/go-apt/pkg/fazzdb"
)

// RepositoryInterface contract for {{.CamelModel}} repository
type RepositoryInterface interface {
	GetQuery(ctx context.Context) (*fazzdb.Query, error)
	RawSelect(ctx context.Context, sample interface{}, query string, payload ...interface{}) (interface{}, error)
    RawExec(ctx context.Context, query string, payload ...interface{}) (bool, error)
	FindAll(ctx context.Context, conditions []fazzdb.SliceCondition, orders []fazzdb.Order, limit int, offset int) ([]*{{.Name}}Model, error)
	FindOne(ctx context.Context, conditions []fazzdb.SliceCondition, orders []fazzdb.Order) (*{{.Name}}Model, error)
	Find(ctx context.Context, id {{.DataType}}) (*{{.Name}}Model, error)
	Create(ctx context.Context, m fazzdb.ModelInterface) (*{{.DataType}}, error)
	Update(ctx context.Context, m fazzdb.ModelInterface) (bool, error)
	Delete(ctx context.Context, m fazzdb.ModelInterface) (bool, error)
}

// repository handle generic access to database
type repository struct {
	base     fazzrepository.RepositoryInterface
	{{.CamelModel}} *{{.Name}}Model
}

// GetQuery get query instance from context
func (r *repository) GetQuery(ctx context.Context) (*fazzdb.Query, error) {
	return r.base.GetQuery(ctx)
}

// RawSelect find data by raw query and payload if there is arguments
func (r *repository) RawSelect(ctx context.Context, sample interface{}, query string, payload ...interface{}) (interface{}, error) {
	return r.base.RawSelect(ctx, sample, query, payload...)
}

// RawExec execute query other than SELECT and return success status of the query
func (r *repository) RawExec(ctx context.Context, query string, payload ...interface{}) (bool, error) {
	return r.base.RawExec(ctx, query, payload...)
}

// FindAll find data by given conditions, order, limit and offset
func (r *repository) FindAll(ctx context.Context, conditions []fazzdb.SliceCondition, orders []fazzdb.Order, limit int, offset int) ([]*{{.Name}}Model, error) {
	results, err := r.base.FindAll(ctx, conditions, orders, limit, offset)
	if results == nil {
	    return nil, err
	}

	return results.([]*{{.Name}}Model), err
}

// FindOne find one data by given conditions and orders
func (r *repository) FindOne(ctx context.Context, conditions []fazzdb.SliceCondition, orders []fazzdb.Order) (*{{.Name}}Model, error) {
	result, err := r.base.FindOne(ctx, conditions, orders)
	if result == nil {
		return nil, err
	}

	return result.(*{{.Name}}Model), err
}

// Find find data by given id
func (r *repository) Find(ctx context.Context, id {{.DataType}}) (*{{.Name}}Model, error) {
	result, err := r.base.Find(ctx, id)
	if result == nil {
		return nil, err
	}

	return result.(*{{.Name}}Model), err
}

// Create insert data by given model
func (r *repository) Create(ctx context.Context, m fazzdb.ModelInterface) (*{{.DataType}}, error) {
	result, err := r.base.Create(ctx, m)
	{{if eq .Type "Uuid"}}
	if nil != err {
        return nil, err
    }

    id := formatter.SliceUint8ToString(result.([]uint8))
    return &id, err
    {{else}}
	return result.(*{{.DataType}}), err
    {{end}}
}

// Update update data by given model
func (r *repository) Update(ctx context.Context, m fazzdb.ModelInterface) (bool, error) {
	return r.base.Update(ctx, m)
}

// Delete delete data by given model
func (r *repository) Delete(ctx context.Context, m fazzdb.ModelInterface) (bool, error) {
	return r.base.Delete(ctx, m)
}

// Repository constructor for {{.CamelModel}} repository
func Repository() RepositoryInterface {
	m := Model()
	return &repository{
		base: fazzrepository.NewRepository(m),
		{{.CamelModel}}: m,
	}
}
