package model

// {{.Model}} handle data for {{.Table}} table
type {{.Model}} struct {
	fazzdb.Model
	Id {{.DataType}} `json:"id" db:"id"`
	{{range .Fields}} {{printf "%s %s `json:\"%s\" db:\"%s\"`\n" .PascalName .Type .CamelName .Name}} {{end}}
}

{{if eq .Type "Uuid"}}
// GeneratePK generate the primary key in {{.Table}} table
func (m *{{.Model}}) GeneratePK() {
	m.GenerateId(m)
}
{{end}}

// Get find model data by key
func (m *{{.Model}}) Get(key string) interface{} {
	return m.Payload()[key]
}

// Payload map model data into map[string]interface{}
func (m *{{.Model}}) Payload() map[string]interface{} {
	return m.MapPayload(m)
}

// {{.Model}}Model construct the {{.Model}} model
func {{.Model}}Model() *{{.Model}} {
	return &{{.Model}}{
		Model: fazzdb.{{.Type}}Model(
			"{{.Table}}",
			[]fazzdb.Column{
			    fazzdb.Col("id"),
			    {{range .Fields}} {{printf "fazzdb.Col(\"%s\"),\n" .Name}} {{end}}
			},
			"id",
			{{.Timestamps}},
			{{.SoftDelete}},
		),
	}
}